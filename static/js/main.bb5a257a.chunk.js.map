{"version":3,"sources":["time.ts","Results.tsx","Select.tsx","NumberInput.tsx","TaskForm.tsx","App.tsx","index.tsx"],"names":["SECOND","value","unit","MINUTE","HOUR","DAY","WEEK","MONTH","YEAR","SECONDS_IN_MINUTE","MINUTES_IN_HOUR","HOURS_IN_DAY","DAYS_IN_WEEK","DAYS_IN_MONTH","MONTHS_IN_YEAR","normalizeDuration","normalizeFrequency","formatDuration","duration","decomposition","decomposeDuration","precision","highestMagnitude","find","magnitude","rest","magnitudeDuration","magnitudeNumber","Math","floor","restDuration","length","map","plur","join","Results","taskDuration","timeShaved","timeSpent","taskFrequency","taskLifetime","timeSaved","worthIt","initialTaskTime","optimizedTaskTime","max","efficiencyGain","Infinity","isItWorthIt","className","label","toFixed","EmptyResults","Stat","children","Select","this","props","onChange","options","event","newValue","target","option","key","React","Component","NumberInput","invalid","type","min","e","parseInt","MINUTE_OPTION","HOUR_OPTION","DAY_OPTION","WEEK_OPTION","MONTH_OPTION","YEAR_OPTION","TASK_DURATION_UNIT_OPTIONS","TIME_SPENT_UNIT_OPTIONS","TIME_SHAVED_UNIT_OPTIONS","TASK_LIFETIME_UNIT_OPTIONS","TASK_FREQUENCY_UNIT_OPTIONS","pluralizeOptions","n","o","Line","TaskForm","current","set","undefined","useUnitValueState","defaultValue","defaultUnit","useState","setValue","isFilled","unitValueState","toUnitValue","Error","App","canComputeResult","every","ReactDOM","render","document","getElementById"],"mappings":"q1BAmBA,IAAMA,EAAsC,CAAEC,MAAO,EAAGC,KAAM,UACxDC,EAAsC,CAAEF,MAAO,EAAGC,KAAM,UACxDE,EAAoC,CAAEH,MAAO,EAAGC,KAAM,QACtDG,EAAmC,CAAEJ,MAAO,EAAGC,KAAM,OACrDI,EAAoC,CAAEL,MAAO,EAAGC,KAAM,QACtDK,EAAqC,CAAEN,MAAO,EAAGC,KAAM,SACvDM,EAAoC,CAAEP,MAAO,EAAGC,KAAM,QAEtDO,EAAoB,GACpBC,EAAkB,GAClBC,EAAe,EACfC,EAAe,EACfC,EAAgB,GAChBC,EAAiB,GAEvB,SAASC,EAAT,GAGyC,IAFvCd,EAEsC,EAFtCA,MAGA,OADsC,EADtCC,MAGE,IAAK,SACH,OAAOD,EACT,IAAK,SACH,OAAOc,EAAkB,CACvBd,MAAOA,EAAQQ,EACfP,KAAM,WAEV,IAAK,OACH,OAAOa,EAAkB,CACvBd,MAAOA,EAAQS,EACfR,KAAM,WAEV,IAAK,MACH,OAAOa,EAAkB,CAAEd,MAAOA,EAAQU,EAAcT,KAAM,SAChE,IAAK,OACH,OAAOa,EAAkB,CAAEd,MAAOA,EAAQW,EAAcV,KAAM,QAChE,IAAK,QACH,OAAOa,EAAkB,CAAEd,MAAOA,EAAQY,EAAeX,KAAM,QACjE,IAAK,OACH,OAAOa,EAAkB,CACvBd,MAAOA,EAAQa,EACfZ,KAAM,WAKd,SAASc,EAAT,GAG8C,IAF5Cf,EAE2C,EAF3CA,MAGA,OAD2C,EAD3CC,MAGE,IAAK,QACH,OAAOD,GAASQ,EAAoBC,EAAkBC,GACxD,IAAK,SACH,OAAOK,EAAmB,CAAEf,MAAOA,EAAQW,EAAcV,KAAM,UACjE,IAAK,UACH,OAAOc,EAAmB,CACxBf,MAAOA,EAAQY,EACfX,KAAM,UAEV,IAAK,SACH,OAAOc,EAAmB,CACxBf,MAAOA,EAAQa,EACfZ,KAAM,aA6Cd,SAASe,EACPC,GAEC,IACKC,EAzCR,SAASC,EACPF,EACAG,GAEA,GAAIA,GAAa,EAEf,MAAO,GAGT,IAAMC,EAAmB,CAACd,EAAMD,EAAOD,EAAMD,EAAKD,EAAMD,EAAQH,GAAQuB,MACtE,SAAAC,GAAS,OAAIN,GAAYH,EAAkBS,MAG7C,IAAKF,EAEH,MAAO,GAGT,IAIIG,EAJEC,EAAoBX,EAAkBO,GACtCK,EAAkBC,KAAKC,MAAMX,EAAWQ,GACxCI,EAAeZ,EAAWS,EAAkBD,EAWlD,OANED,EAFEK,GAAgB,EAEX,GAGAV,EAAkBU,EADFT,EAAYH,EAAYY,GAI3C,CAAN,KAAaR,EAAb,CAA+BrB,MAAO0B,KAAtC,mBAA4DF,IAUtCL,CAAkBF,EADxC,uDADoB,KAIpB,OAA6B,IAAzBC,EAAcY,OACT,YAIFZ,EACJa,KAAI,gBAAG/B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,gBAAwBD,EAAxB,YAAiCgC,IAAK/B,EAAMD,OAChDiC,KAAK,MCrIV,IAAMC,EAMD,SAAC,GAA0E,IAAxEC,EAAuE,EAAvEA,aAAcC,EAAyD,EAAzDA,WAAYC,EAA6C,EAA7CA,UAA6C,EDkI/E,SACEF,EACAG,EACAC,EACAH,EACAC,GAEA,IAIMG,EAAYJ,EAAaG,EAAeD,EAM9C,MAAO,CACLG,QANcD,EAAYH,EAO1BG,YACAE,gBAbsBP,EAAeG,EAAgBC,EAcrDI,kBAZAhB,KAAKiB,IAAI,EAAGT,EAAeC,GAAcE,EAAgBC,EAazDM,eAP8C,MAFT,IAAdR,EAAkBS,IAAWN,EAAYH,GAEvB,IC1IvCU,CACFZ,EAR2E,EAAlCG,cAAkC,EAAnBC,aAWxDH,EACAC,GAVAI,EAF2E,EAE3EA,QACAD,EAH2E,EAG3EA,UACAE,EAJ2E,EAI3EA,gBACAC,EAL2E,EAK3EA,kBACAE,EAN2E,EAM3EA,eASF,OACE,yBAAKG,UAAU,WACb,yBAAKA,UAAU,UAAUP,EAAU,OAAS,SAC5C,yBAAKO,UAAU,SACb,kBAAC,EAAD,CAAMC,MAAM,cAAcjC,EAAeqB,IACzC,kBAAC,EAAD,CAAMY,MAAM,cAAcjC,EAAewB,IACzC,kBAAC,EAAD,CAAMS,MAAM,mBACTJ,GAAkB,EAAI,IAAM,GAC5BA,IAAmBC,IAAW,SAAMD,EAAeK,QAAQ,GAF9D,KAKA,kBAAC,EAAD,CAAMD,MAAM,0BACTjC,EAAe0B,IAElB,kBAAC,EAAD,CAAMO,MAAM,8CACTjC,EAAe2B,OAUpBQ,EAAyB,WAC7B,OACE,yBAAKH,UAAU,WACb,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAMC,MAAM,cAAZ,KACA,kBAAC,EAAD,CAAMA,MAAM,cAAZ,KACA,kBAAC,EAAD,CAAMA,MAAM,mBAAZ,KACA,kBAAC,EAAD,CAAMA,MAAM,0BAAZ,KACA,kBAAC,EAAD,CAAMA,MAAM,8CAAZ,QAMFG,EAAgE,SAAC,GAGhE,IAFLH,EAEI,EAFJA,MACAI,EACI,EADJA,SAEA,OACE,yBAAKL,UAAU,QACZC,EADH,KACW,2BAAII,K,qCC5CJC,E,iLArBc,IAAD,EACaC,KAAKC,MAAlCC,EADgB,EAChBA,SAAUC,EADM,EACNA,QAAS1D,EADH,EACGA,MAC3B,OACE,4BACEgD,UAAU,QACVhD,MAAOA,EACPyD,SAAU,SAAAE,GACR,IAAMC,EAAYD,EAAME,OAAO7D,MAC/ByD,EAASG,KAGVF,EAAQ3B,KAAI,SAAA+B,GAAM,OACjB,4BAAQC,IAAKD,EAAO9D,MAAOA,MAAO8D,EAAO9D,OACtC8D,EAAOb,e,GAlBmBe,IAAMC,WCoB9BC,MAtBf,SAAqBV,GAInB,IAAMW,EAA0B,OAAhBX,EAAMxD,MACtB,OACE,2BACEgD,UAAW,UAAYmB,EAAU,UAAY,SAC7CC,KAAK,SACLC,IAAI,IACJrE,MAAOmE,EAAU,GAAMX,EAAMxD,MAC7ByD,SAAU,SAAAa,GACR,IAAKA,EAAET,OAAO7D,MACZ,OAAOwD,EAAMC,SAAS,MAExB,IAAMzD,EAAQ2B,KAAKiB,IAAI,EAAG2B,SAASD,EAAET,OAAO7D,MAAO,KACnDwD,EAAMC,SAASzD,O,8NCRvB,IACMwE,EAAkC,CAAExE,MAAO,SAAUiD,MAAO,UAC5DwB,EAAgC,CAAEzE,MAAO,OAAQiD,MAAO,QACxDyB,EAA+B,CAAE1E,MAAO,MAAOiD,MAAO,OACtD0B,EAAgC,CAAE3E,MAAO,OAAQiD,MAAO,QACxD2B,EAAiC,CAAE5E,MAAO,QAASiD,MAAO,SAC1D4B,EAAgC,CAAE7E,MAAO,OAAQiD,MAAO,QAExD6B,EAA6B,CACjCN,EACAC,EACAC,EACAC,EACAC,GAGIG,EAA0B,CAC9BP,EACAC,EACAC,EACAC,EACAC,EACAC,GAGIG,EAA2B,CAzBO,CAAEhF,MAAO,SAAUiD,MAAO,UA2BhEuB,EACAC,EACAC,EACAC,EACAC,GAGIK,EAA6B,CACjCP,EACAC,EACAC,EACAC,GAGIK,EAGD,CACH,CAAElF,MAAO,QAASiD,MAAO,SACzB,CAAEjD,MAAO,SAAUiD,MAAO,UAC1B,CAAEjD,MAAO,UAAWiD,MAAO,WAC3B,CAAEjD,MAAO,SAAUiD,MAAO,WAG5B,SAASkC,EACPzB,EACA0B,GAEA,OAAU,OAANA,EACK1B,EAGFA,EAAQ3B,KAAI,SAAAsD,GAAC,O,yVAAA,IAAUA,EAAV,CAAapC,MAAOjB,IAAKqD,EAAEpC,MAAOmC,QAGxD,IAAME,EAAiB,SAAA9B,GACrB,OACE,0BAAMR,UAAU,QACbQ,EAAMH,SACP,+BA4GSkC,GAjGV,SAAC,GAA0E,IAAxEpD,EAAuE,EAAvEA,aAAcC,EAAyD,EAAzDA,WAAYC,EAA6C,EAA7CA,UAAWE,EAAkC,EAAlCA,aAAcD,EAAoB,EAApBA,cACzD,OACE,oCACE,6DACA,6BACE,2BACE,kBAAC,EAAD,KACG,qBACD,kBAAC,EAAD,CACEtC,MAAOmC,EAAanC,MAAMwF,QAC1B/B,SAAUtB,EAAanC,MAAMyF,MAE/B,kBAAC,EAAD,CACEzF,MAAOmC,EAAalC,KAAKuF,QACzB/B,SAAUtB,EAAalC,KAAKwF,IAC5B/B,QAASyB,EACPL,EACA3C,EAAanC,MAAMwF,WAGtB,KAEH,kBAAC,EAAD,KACG,qBACD,kBAAC,EAAD,CACExF,MAAOsC,EAActC,MAAMwF,QAC3B/B,SAAUnB,EAActC,MAAMyF,MAEhC,sCACOzD,IACH,OACgC,OAAhCM,EAActC,MAAMwF,aAChBE,EACApD,EAActC,MAAMwF,SAL5B,MAQA,kBAAC,EAAD,CACExF,MAAOsC,EAAcrC,KAAKuF,QAC1B/B,SAAUnB,EAAcrC,KAAKwF,IAC7B/B,QAASwB,KAGb,kBAAC,EAAD,KACE,2BAAI,SACJ,kBAAC,EAAD,CACElF,MAAOuC,EAAavC,MAAMwF,QAC1B/B,SAAUlB,EAAavC,MAAMyF,MAE/B,kBAAC,EAAD,CACEzF,MAAOuC,EAAatC,KAAKuF,QACzB/B,SAAUlB,EAAatC,KAAKwF,IAC5B/B,QAASyB,EACPF,EACA1C,EAAavC,MAAMwF,WAGtB,MAGL,2BACE,kBAAC,EAAD,KACG,cACD,kBAAC,EAAD,CACExF,MAAOqC,EAAUrC,MAAMwF,QACvB/B,SAAUpB,EAAUrC,MAAMyF,MAE5B,kBAAC,EAAD,CACEzF,MAAOqC,EAAUpC,KAAKuF,QACtB/B,SAAUpB,EAAUpC,KAAKwF,IACzB/B,QAASyB,EACPJ,EACA1C,EAAUrC,MAAMwF,YAItB,kBAAC,EAAD,KACG,iCACD,kBAAC,EAAD,CACExF,MAAOoC,EAAWpC,MAAMwF,QACxB/B,SAAUrB,EAAWpC,MAAMyF,MAE7B,kBAAC,EAAD,CACEzF,MAAOoC,EAAWnC,KAAKuF,QACvB/B,SAAUrB,EAAWnC,KAAKwF,IAC1B/B,QAASyB,EACPH,EACA5C,EAAWpC,MAAMwF,WAGpB,SCrJb,SAASG,GACPC,EACAC,GACuB,IAAD,EACI7B,IAAM8B,SAAmBF,GAD7B,mBACf5F,EADe,KACR+F,EADQ,OAEE/B,IAAM8B,SAAYD,GAFpB,mBAItB,MAAO,CACL7F,MAAO,CACLwF,QAASxF,EACTyF,IAAKM,GAEP9F,KAAM,CACJuF,QAVkB,KAWlBC,IAXkB,OAgBxB,SAASO,GAASC,GAChB,OAAwC,OAAjCA,EAAejG,MAAMwF,QAG9B,SAASU,GACPD,GAEA,GAAqC,OAAjCA,EAAejG,MAAMwF,QACvB,MAAM,IAAIW,MAAM,gCAElB,MAAO,CACLnG,MAAOiG,EAAejG,MAAMwF,QAC5BvF,KAAMgG,EAAehG,KAAKuF,SAI9B,IA6CeY,GA7CO,WACpB,IAAMjE,EAAewD,GAAkB,EAAG,UACpCtD,EAAYsD,GAAkB,EAAG,QACjCvD,EAAauD,GAAkB,EAAG,UAClCrD,EAAgBqD,GAAkB,GAAI,SACtCpD,EAAeoD,GAAkB,EAAG,SAEpCU,EAAmB,CACvBlE,EACAC,EACAC,EACAE,EACAD,GACAgE,MAAMN,IAER,OACE,yBAAKhD,UAAU,OACb,yBAAKA,UAAU,WACb,kBAAC,GAAD,CACEb,aAAcA,EACdC,WAAYA,EACZC,UAAWA,EACXE,aAAcA,EACdD,cAAeA,IAKjB,2DACC+D,EACC,kBAAC,EAAD,CACElE,aAAcrB,EAAkBoF,GAAY/D,IAC5CE,UAAWvB,EAAkBoF,GAAY7D,IACzCD,WAAYtB,EAAkBoF,GAAY9D,IAC1CE,cAAevB,EAAmBmF,GAAY5D,IAC9CC,aAAczB,EAAkBoF,GAAY3D,MAG9C,kBAAC,EAAD,SC/FVgE,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.bb5a257a.chunk.js","sourcesContent":["import plur from \"plur\";\n\nexport type TimeUnit =\n  | \"second\"\n  | \"minute\"\n  | \"hour\"\n  | \"day\"\n  | \"week\"\n  | \"month\"\n  | \"year\";\n\nexport type FrequencyUnit = \"daily\" | \"weekly\" | \"monthly\" | \"yearly\";\nexport type TimeUnitOption = { value: TimeUnit; label: string };\n\nexport type UnitValue<U, V> = {\n  value: V;\n  unit: U;\n};\n\nconst SECOND: UnitValue<TimeUnit, number> = { value: 1, unit: \"second\" };\nconst MINUTE: UnitValue<TimeUnit, number> = { value: 1, unit: \"minute\" };\nconst HOUR: UnitValue<TimeUnit, number> = { value: 1, unit: \"hour\" };\nconst DAY: UnitValue<TimeUnit, number> = { value: 1, unit: \"day\" };\nconst WEEK: UnitValue<TimeUnit, number> = { value: 1, unit: \"week\" };\nconst MONTH: UnitValue<TimeUnit, number> = { value: 1, unit: \"month\" };\nconst YEAR: UnitValue<TimeUnit, number> = { value: 1, unit: \"year\" };\n\nconst SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst HOURS_IN_DAY = 7; // worked hours per day\nconst DAYS_IN_WEEK = 5; // worked days per week\nconst DAYS_IN_MONTH = 21; // worked days per month\nconst MONTHS_IN_YEAR = 12;\n\nfunction normalizeDuration({\n  value,\n  unit\n}: UnitValue<TimeUnit, number>): number {\n  switch (unit) {\n    case \"second\":\n      return value;\n    case \"minute\":\n      return normalizeDuration({\n        value: value * SECONDS_IN_MINUTE,\n        unit: \"second\"\n      });\n    case \"hour\":\n      return normalizeDuration({\n        value: value * MINUTES_IN_HOUR,\n        unit: \"minute\"\n      });\n    case \"day\":\n      return normalizeDuration({ value: value * HOURS_IN_DAY, unit: \"hour\" });\n    case \"week\":\n      return normalizeDuration({ value: value * DAYS_IN_WEEK, unit: \"day\" });\n    case \"month\":\n      return normalizeDuration({ value: value * DAYS_IN_MONTH, unit: \"day\" });\n    case \"year\":\n      return normalizeDuration({\n        value: value * MONTHS_IN_YEAR,\n        unit: \"month\"\n      });\n  }\n}\n\nfunction normalizeFrequency({\n  value,\n  unit\n}: UnitValue<FrequencyUnit, number>): number {\n  switch (unit) {\n    case \"daily\":\n      return value / (SECONDS_IN_MINUTE * MINUTES_IN_HOUR * HOURS_IN_DAY);\n    case \"weekly\":\n      return normalizeFrequency({ value: value / DAYS_IN_WEEK, unit: \"daily\" });\n    case \"monthly\":\n      return normalizeFrequency({\n        value: value / DAYS_IN_MONTH,\n        unit: \"daily\"\n      });\n    case \"yearly\":\n      return normalizeFrequency({\n        value: value / MONTHS_IN_YEAR,\n        unit: \"monthly\"\n      });\n  }\n}\n\n/**\n * Decompose a duration in a sum of days, weeks, months...\n */\nfunction decomposeDuration(\n  duration: number, // seconds\n  precision: number // percentage of precision, for simpler decomposition\n): Array<UnitValue<TimeUnit, number>> {\n  if (precision >= 1) {\n    // 0 is a good approximation at +/- 100%\n    return [];\n  }\n\n  const highestMagnitude = [YEAR, MONTH, WEEK, DAY, HOUR, MINUTE, SECOND].find(\n    magnitude => duration >= normalizeDuration(magnitude)\n  );\n\n  if (!highestMagnitude) {\n    // Less than one second\n    return [];\n  }\n\n  const magnitudeDuration = normalizeDuration(highestMagnitude);\n  const magnitudeNumber = Math.floor(duration / magnitudeDuration);\n  const restDuration = duration - magnitudeNumber * magnitudeDuration;\n\n  let rest: Array<UnitValue<TimeUnit, number>>;\n  if (restDuration <= 0) {\n    // Nothing left to decompose\n    rest = [];\n  } else {\n    const restPrecision = (precision * duration) / restDuration;\n    rest = decomposeDuration(restDuration, restPrecision);\n  }\n\n  return [{ ...highestMagnitude, value: magnitudeNumber }, ...rest];\n}\n\n/**\n * Return a human readable string to represent a duration, using given precision\n */\nfunction formatDuration(\n  duration: number, // seconds\n  precision: number = 0.01 // percentage, for simpler representation. Default 1%\n) {\n  const decomposition = decomposeDuration(duration, precision);\n\n  if (decomposition.length === 0) {\n    return \"0 seconds\";\n  }\n\n  // Format the decomposition as a string\n  return decomposition\n    .map(({ value, unit }) => `${value} ${plur(unit, value)}`)\n    .join(\", \");\n}\n\nfunction isItWorthIt(\n  taskDuration: number, // seconds\n  taskFrequency: number, // per second\n  taskLifetime: number, // seconds\n  timeShaved: number, // seconds\n  timeSpent: number // seconds\n) {\n  const initialTaskTime = taskDuration * taskFrequency * taskLifetime;\n  const optimizedTaskTime =\n    Math.max(0, taskDuration - timeShaved) * taskFrequency * taskLifetime;\n\n  const timeSaved = timeShaved * taskLifetime * taskFrequency;\n  const worthIt = timeSaved > timeSpent;\n  const efficiencyFactor = timeSpent === 0 ? Infinity : timeSaved / timeSpent;\n\n  const efficiencyGain = (efficiencyFactor - 1) * 100;\n\n  return {\n    worthIt,\n    timeSaved,\n    initialTaskTime,\n    optimizedTaskTime,\n    efficiencyGain\n  };\n}\n\nexport {\n  isItWorthIt,\n  decomposeDuration,\n  formatDuration,\n  normalizeDuration,\n  normalizeFrequency,\n  SECONDS_IN_MINUTE,\n  MINUTES_IN_HOUR,\n  HOURS_IN_DAY,\n  DAYS_IN_WEEK,\n  DAYS_IN_MONTH,\n  MONTHS_IN_YEAR\n};\n","import React from \"react\";\n\nimport { formatDuration, isItWorthIt } from \"./time\";\n\n/**\n * Display answer and stats for the question \"Is it worth the time?\"\n */\nconst Results: React.FC<{\n  taskDuration: number;\n  timeSpent: number;\n  timeShaved: number;\n  taskFrequency: number;\n  taskLifetime: number;\n}> = ({ taskDuration, timeShaved, timeSpent, taskFrequency, taskLifetime }) => {\n  const {\n    worthIt,\n    timeSaved,\n    initialTaskTime,\n    optimizedTaskTime,\n    efficiencyGain\n  } = isItWorthIt(\n    taskDuration,\n    taskFrequency,\n    taskLifetime,\n    timeShaved,\n    timeSpent\n  );\n\n  return (\n    <div className=\"results\">\n      <div className=\"answer\">{worthIt ? \"YES!\" : \"No...\"}</div>\n      <div className=\"stats\">\n        <Stat label=\"Time spent\">{formatDuration(timeSpent)}</Stat>\n        <Stat label=\"Time saved\">{formatDuration(timeSaved)}</Stat>\n        <Stat label=\"Efficiency gain\">\n          {efficiencyGain >= 0 ? \"+\" : \"\"}\n          {efficiencyGain === Infinity ? \"∞\" : efficiencyGain.toFixed(0)}%\n        </Stat>\n\n        <Stat label=\"Total time of the task\">\n          {formatDuration(initialTaskTime)}\n        </Stat>\n        <Stat label=\"Total time of the task, after optimization\">\n          {formatDuration(optimizedTaskTime)}\n        </Stat>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Same as results, but without values\n */\nconst EmptyResults: React.FC = () => {\n  return (\n    <div className=\"results\">\n      <div className=\"answer\">-</div>\n      <div className=\"stats\">\n        <Stat label=\"Time spent\">-</Stat>\n        <Stat label=\"Time saved\">-</Stat>\n        <Stat label=\"Efficiency gain\">-</Stat>\n        <Stat label=\"Total time of the task\">-</Stat>\n        <Stat label=\"Total time of the task, after optimization\">-</Stat>\n      </div>\n    </div>\n  );\n};\n\nconst Stat: React.FC<{ children?: React.ReactNode; label: string }> = ({\n  label,\n  children\n}) => {\n  return (\n    <div className=\"stat\">\n      {label}: <b>{children}</b>\n    </div>\n  );\n};\n\nexport { Results, EmptyResults };\n","import React from \"react\";\n\nimport { Option } from \"./App\";\n\nclass Select<T extends string> extends React.Component<{\n  value: T;\n  onChange: (newValue: T) => void;\n  options: Array<Option<T>>;\n}> {\n  render(): React.ReactNode {\n    const { onChange, options, value } = this.props;\n    return (\n      <select\n        className=\"field\"\n        value={value}\n        onChange={event => {\n          const newValue = (event.target.value as any) as T;\n          onChange(newValue);\n        }}\n      >\n        {options.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    );\n  }\n}\n\nexport default Select;\n","import React from \"react\";\n\nfunction NumberInput(props: {\n  value: number | null;\n  onChange: (newValue: number | null) => void;\n}) {\n  const invalid = props.value === null;\n  return (\n    <input\n      className={\"field \" + (invalid ? \"invalid\" : \"valid\")}\n      type=\"number\"\n      min=\"0\"\n      value={invalid ? \"\" : (props.value as number)}\n      onChange={e => {\n        if (!e.target.value) {\n          return props.onChange(null);\n        }\n        const value = Math.max(0, parseInt(e.target.value, 10));\n        props.onChange(value);\n      }}\n    />\n  );\n}\n\nexport default NumberInput;\n","import React from \"react\";\nimport plur from \"plur\";\nimport \"./App.css\";\n\nimport { UnitValueState, Option } from \"./App\";\nimport { FrequencyUnit, TimeUnit } from \"./time\";\n\nimport Select from \"./Select\";\nimport NumberInput from \"./NumberInput\";\n\nconst SECOND_OPTION: Option<TimeUnit> = { value: \"second\", label: \"second\" };\nconst MINUTE_OPTION: Option<TimeUnit> = { value: \"minute\", label: \"minute\" };\nconst HOUR_OPTION: Option<TimeUnit> = { value: \"hour\", label: \"hour\" };\nconst DAY_OPTION: Option<TimeUnit> = { value: \"day\", label: \"day\" };\nconst WEEK_OPTION: Option<TimeUnit> = { value: \"week\", label: \"week\" };\nconst MONTH_OPTION: Option<TimeUnit> = { value: \"month\", label: \"month\" };\nconst YEAR_OPTION: Option<TimeUnit> = { value: \"year\", label: \"year\" };\n\nconst TASK_DURATION_UNIT_OPTIONS = [\n  MINUTE_OPTION,\n  HOUR_OPTION,\n  DAY_OPTION,\n  WEEK_OPTION,\n  MONTH_OPTION\n];\n\nconst TIME_SPENT_UNIT_OPTIONS = [\n  MINUTE_OPTION,\n  HOUR_OPTION,\n  DAY_OPTION,\n  WEEK_OPTION,\n  MONTH_OPTION,\n  YEAR_OPTION\n];\n\nconst TIME_SHAVED_UNIT_OPTIONS = [\n  SECOND_OPTION,\n  MINUTE_OPTION,\n  HOUR_OPTION,\n  DAY_OPTION,\n  WEEK_OPTION,\n  MONTH_OPTION\n];\n\nconst TASK_LIFETIME_UNIT_OPTIONS = [\n  DAY_OPTION,\n  WEEK_OPTION,\n  MONTH_OPTION,\n  YEAR_OPTION\n];\n\nconst TASK_FREQUENCY_UNIT_OPTIONS: Array<{\n  value: FrequencyUnit;\n  label: string;\n}> = [\n  { value: \"daily\", label: \"a day\" },\n  { value: \"weekly\", label: \"a week\" },\n  { value: \"monthly\", label: \"a month\" },\n  { value: \"yearly\", label: \"a year\" }\n];\n\nfunction pluralizeOptions<T>(\n  options: Array<Option<T>>,\n  n: number | null\n): Array<Option<T>> {\n  if (n === null) {\n    return options;\n  }\n\n  return options.map(o => ({ ...o, label: plur(o.label, n) }));\n}\n\nconst Line: React.FC = props => {\n  return (\n    <span className=\"line\">\n      {props.children}\n      <br />\n    </span>\n  );\n};\n\nconst TaskForm: React.FC<{\n  taskDuration: UnitValueState<TimeUnit, number>;\n  timeShaved: UnitValueState<TimeUnit, number>;\n  timeSpent: UnitValueState<TimeUnit, number>;\n  taskLifetime: UnitValueState<TimeUnit, number>;\n  taskFrequency: UnitValueState<FrequencyUnit, number>;\n}> = ({ taskDuration, timeShaved, timeSpent, taskLifetime, taskFrequency }) => {\n  return (\n    <>\n      <h1>I have a recurring task…</h1>\n      <div>\n        <p>\n          <Line>\n            {\"… that takes \"}\n            <NumberInput\n              value={taskDuration.value.current}\n              onChange={taskDuration.value.set}\n            />\n            <Select\n              value={taskDuration.unit.current}\n              onChange={taskDuration.unit.set}\n              options={pluralizeOptions(\n                TASK_DURATION_UNIT_OPTIONS,\n                taskDuration.value.current\n              )}\n            />\n            {\",\"}\n          </Line>\n          <Line>\n            {\"that I have to do \"}\n            <NumberInput\n              value={taskFrequency.value.current}\n              onChange={taskFrequency.value.set}\n            />\n            <b>\n              {` ${plur(\n                \"time\",\n                taskFrequency.value.current === null\n                  ? undefined\n                  : taskFrequency.value.current\n              )} `}\n            </b>\n            <Select\n              value={taskFrequency.unit.current}\n              onChange={taskFrequency.unit.set}\n              options={TASK_FREQUENCY_UNIT_OPTIONS}\n            />\n          </Line>\n          <Line>\n            <b>{\" for \"}</b>\n            <NumberInput\n              value={taskLifetime.value.current}\n              onChange={taskLifetime.value.set}\n            />\n            <Select\n              value={taskLifetime.unit.current}\n              onChange={taskLifetime.unit.set}\n              options={pluralizeOptions(\n                TASK_LIFETIME_UNIT_OPTIONS,\n                taskLifetime.value.current\n              )}\n            />\n            {\".\"}\n          </Line>\n        </p>\n        <p>\n          <Line>\n            {\"If I spent \"}\n            <NumberInput\n              value={timeSpent.value.current}\n              onChange={timeSpent.value.set}\n            />\n            <Select\n              value={timeSpent.unit.current}\n              onChange={timeSpent.unit.set}\n              options={pluralizeOptions(\n                TIME_SPENT_UNIT_OPTIONS,\n                timeSpent.value.current\n              )}\n            />\n          </Line>\n          <Line>\n            {\" I could shorten that task by \"}\n            <NumberInput\n              value={timeShaved.value.current}\n              onChange={timeShaved.value.set}\n            />\n            <Select\n              value={timeShaved.unit.current}\n              onChange={timeShaved.unit.set}\n              options={pluralizeOptions(\n                TIME_SHAVED_UNIT_OPTIONS,\n                timeShaved.value.current\n              )}\n            />\n            {\".\"}\n          </Line>\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default TaskForm;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport {\n  FrequencyUnit,\n  TimeUnit,\n  UnitValue,\n  normalizeDuration,\n  normalizeFrequency\n} from \"./time\";\n\nimport { Results, EmptyResults } from \"./Results\";\nimport TaskForm from \"./TaskForm\";\n\nexport type Option<T> = { value: T; label: string };\n\nexport type UnitValueState<U, V> = {\n  value: {\n    current: V | null;\n    set: React.Dispatch<React.SetStateAction<V | null>>;\n  };\n  unit: {\n    current: U;\n    set: React.Dispatch<React.SetStateAction<U>>;\n  };\n};\n\nfunction useUnitValueState<U, V>(\n  defaultValue: V,\n  defaultUnit: U\n): UnitValueState<U, V> {\n  const [value, setValue] = React.useState<V | null>(defaultValue);\n  const [unit, setUnit] = React.useState<U>(defaultUnit);\n\n  return {\n    value: {\n      current: value,\n      set: setValue\n    },\n    unit: {\n      current: unit,\n      set: setUnit\n    }\n  };\n}\n\nfunction isFilled(unitValueState: { value: { current: any } }) {\n  return unitValueState.value.current !== null;\n}\n\nfunction toUnitValue<U, V>(\n  unitValueState: UnitValueState<U, V>\n): UnitValue<U, V> {\n  if (unitValueState.value.current === null) {\n    throw new Error(\"Cannot work with null values\");\n  }\n  return {\n    value: unitValueState.value.current,\n    unit: unitValueState.unit.current\n  };\n}\n\nconst App: React.FC = () => {\n  const taskDuration = useUnitValueState(3, \"minute\" as TimeUnit);\n  const timeSpent = useUnitValueState(1, \"hour\" as TimeUnit);\n  const timeShaved = useUnitValueState(2, \"minute\" as TimeUnit);\n  const taskFrequency = useUnitValueState(10, \"daily\" as FrequencyUnit);\n  const taskLifetime = useUnitValueState(1, \"month\" as TimeUnit);\n\n  const canComputeResult = [\n    taskDuration,\n    timeShaved,\n    timeSpent,\n    taskLifetime,\n    taskFrequency\n  ].every(isFilled);\n\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <TaskForm\n          taskDuration={taskDuration}\n          timeShaved={timeShaved}\n          timeSpent={timeSpent}\n          taskLifetime={taskLifetime}\n          taskFrequency={taskFrequency}\n        />\n\n        {/* TODO; Add advanced panel to define number of worked hours in a day and worked days in a week ? */}\n\n        <h1>Would it be worth the time?</h1>\n        {canComputeResult ? (\n          <Results\n            taskDuration={normalizeDuration(toUnitValue(taskDuration))}\n            timeSpent={normalizeDuration(toUnitValue(timeSpent))}\n            timeShaved={normalizeDuration(toUnitValue(timeShaved))}\n            taskFrequency={normalizeFrequency(toUnitValue(taskFrequency))}\n            taskLifetime={normalizeDuration(toUnitValue(taskLifetime))}\n          />\n        ) : (\n          <EmptyResults />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}