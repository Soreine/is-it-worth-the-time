{"version":3,"sources":["time.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SECOND","value","unit","MINUTE","HOUR","DAY","WEEK","MONTH","YEAR","SECONDS_IN_MINUTE","MINUTES_IN_HOUR","HOURS_IN_DAY","DAYS_IN_WEEK","DAYS_IN_MONTH","MONTHS_IN_YEAR","normalizeDuration","normalizeFrequency","formatDuration","duration","decomposition","decomposeDuration","precision","highestMagnitude","find","magnitude","rest","magnitudeDuration","magnitudeNumber","Math","floor","restDuration","length","map","plur","join","Select","this","props","onChange","options","className","event","newValue","target","option","key","label","React","Component","NumberInput","type","min","e","max","parseInt","MINUTE_OPTION","HOUR_OPTION","DAY_OPTION","WEEK_OPTION","MONTH_OPTION","YEAR_OPTION","TASK_DURATION_UNIT_OPTIONS","TIME_SPENT_UNIT_OPTIONS","TIME_SHAVED_UNIT_OPTIONS","TASK_LIFETIME_UNIT_OPTIONS","TASK_FREQUENCY_UNIT_OPTIONS","useUnitValueState","defaultValue","defaultUnit","useState","setValue","current","set","isFilled","unitValueState","toUnitValue","Error","pluralizeOptions","n","o","Line","children","Result","taskDuration","timeShaved","timeSpent","taskFrequency","taskLifetime","timeSaved","worthIt","initialTaskTime","optimizedTaskTime","efficiencyFactor","Infinity","isItWorthIt","toFixed","App","canComputeResult","every","undefined","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f1ddaf3.chunk.js","sourcesContent":["import plur from \"plur\";\n\nexport type TimeUnit =\n  | \"second\"\n  | \"minute\"\n  | \"hour\"\n  | \"day\"\n  | \"week\"\n  | \"month\"\n  | \"year\";\n\nexport type FrequencyUnit = \"daily\" | \"weekly\" | \"monthly\" | \"yearly\";\nexport type TimeUnitOption = { value: TimeUnit; label: string };\n\nexport type UnitValue<U, V> = {\n  value: V;\n  unit: U;\n};\n\nconst SECOND: UnitValue<TimeUnit, number> = { value: 1, unit: \"second\" };\nconst MINUTE: UnitValue<TimeUnit, number> = { value: 1, unit: \"minute\" };\nconst HOUR: UnitValue<TimeUnit, number> = { value: 1, unit: \"hour\" };\nconst DAY: UnitValue<TimeUnit, number> = { value: 1, unit: \"day\" };\nconst WEEK: UnitValue<TimeUnit, number> = { value: 1, unit: \"week\" };\nconst MONTH: UnitValue<TimeUnit, number> = { value: 1, unit: \"month\" };\nconst YEAR: UnitValue<TimeUnit, number> = { value: 1, unit: \"year\" };\n\nconst SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst HOURS_IN_DAY = 7; // worked hours per day\nconst DAYS_IN_WEEK = 5; // worked days per week\nconst DAYS_IN_MONTH = 21; // worked days per month\nconst MONTHS_IN_YEAR = 12;\n\nfunction normalizeDuration({\n  value,\n  unit\n}: UnitValue<TimeUnit, number>): number {\n  switch (unit) {\n    case \"second\":\n      return value;\n    case \"minute\":\n      return normalizeDuration({\n        value: value * SECONDS_IN_MINUTE,\n        unit: \"second\"\n      });\n    case \"hour\":\n      return normalizeDuration({\n        value: value * MINUTES_IN_HOUR,\n        unit: \"minute\"\n      });\n    case \"day\":\n      return normalizeDuration({ value: value * HOURS_IN_DAY, unit: \"hour\" });\n    case \"week\":\n      return normalizeDuration({ value: value * DAYS_IN_WEEK, unit: \"day\" });\n    case \"month\":\n      return normalizeDuration({ value: value * DAYS_IN_MONTH, unit: \"day\" });\n    case \"year\":\n      return normalizeDuration({\n        value: value * MONTHS_IN_YEAR,\n        unit: \"month\"\n      });\n  }\n}\n\nfunction normalizeFrequency({\n  value,\n  unit\n}: UnitValue<FrequencyUnit, number>): number {\n  switch (unit) {\n    case \"daily\":\n      return value / (SECONDS_IN_MINUTE * MINUTES_IN_HOUR * HOURS_IN_DAY);\n    case \"weekly\":\n      return normalizeFrequency({ value: value / DAYS_IN_WEEK, unit: \"daily\" });\n    case \"monthly\":\n      return normalizeFrequency({\n        value: value / DAYS_IN_MONTH,\n        unit: \"daily\"\n      });\n    case \"yearly\":\n      return normalizeFrequency({\n        value: value / MONTHS_IN_YEAR,\n        unit: \"monthly\"\n      });\n  }\n}\n\n/**\n * Decompose a duration in a sum of days, weeks, months...\n */\nfunction decomposeDuration(\n  duration: number, // seconds\n  precision: number // percentage of precision, for simpler decomposition\n): Array<UnitValue<TimeUnit, number>> {\n  if (precision >= 1) {\n    // 0 is a good approximation at +/- 100%\n    return [];\n  }\n\n  const highestMagnitude = [YEAR, MONTH, WEEK, DAY, HOUR, MINUTE, SECOND].find(\n    magnitude => duration >= normalizeDuration(magnitude)\n  );\n\n  if (!highestMagnitude) {\n    // Less than one second\n    return [];\n  }\n\n  const magnitudeDuration = normalizeDuration(highestMagnitude);\n  const magnitudeNumber = Math.floor(duration / magnitudeDuration);\n  const restDuration = duration - magnitudeNumber * magnitudeDuration;\n\n  let rest: Array<UnitValue<TimeUnit, number>>;\n  if (restDuration <= 0) {\n    // Nothing left to decompose\n    rest = [];\n  } else {\n    const restPrecision = (precision * duration) / restDuration;\n    rest = decomposeDuration(restDuration, restPrecision);\n  }\n\n  return [{ ...highestMagnitude, value: magnitudeNumber }, ...rest];\n}\n\n/**\n * Return a human readable string to represent a duration, using given precision\n */\nfunction formatDuration(\n  duration: number, // seconds\n  precision: number = 0.01 // percentage, for simpler representation. Default 1%\n) {\n  const decomposition = decomposeDuration(duration, precision);\n\n  if (decomposition.length === 0) {\n    return \"0 seconds\";\n  }\n\n  // Format the decomposition as a string\n  return decomposition\n    .map(({ value, unit }) => `${value} ${plur(unit, value)}`)\n    .join(\", \");\n}\n\nfunction isItWorthIt(\n  taskDuration: number, // seconds\n  taskFrequency: number, // per second\n  taskLifetime: number, // seconds\n  timeShaved: number, // seconds\n  timeSpent: number // seconds\n) {\n  const initialTaskTime = taskDuration * taskFrequency * taskLifetime;\n  const optimizedTaskTime =\n    Math.max(0, taskDuration - timeShaved) * taskFrequency * taskLifetime;\n\n  const timeSaved = timeShaved * taskLifetime * taskFrequency;\n  const worthIt = timeSaved > timeSpent;\n  const efficiencyFactor =\n    timeSpent === 0 ? Infinity : (timeSaved / timeSpent) * 100;\n\n  return {\n    worthIt,\n    timeSaved,\n    initialTaskTime,\n    optimizedTaskTime,\n    efficiencyFactor\n  };\n}\n\nexport {\n  isItWorthIt,\n  decomposeDuration,\n  formatDuration,\n  normalizeDuration,\n  normalizeFrequency,\n  SECONDS_IN_MINUTE,\n  MINUTES_IN_HOUR,\n  HOURS_IN_DAY,\n  DAYS_IN_WEEK,\n  DAYS_IN_MONTH,\n  MONTHS_IN_YEAR\n};\n","import React from \"react\";\nimport plur from \"plur\";\nimport \"./App.css\";\n\nimport {\n  FrequencyUnit,\n  TimeUnit,\n  UnitValue,\n  normalizeDuration,\n  normalizeFrequency,\n  formatDuration,\n  isItWorthIt\n} from \"./time\";\n\ntype Option<T> = { value: T; label: string };\n\nclass Select<T extends string> extends React.Component<{\n  value: T;\n  onChange: (newValue: T) => void;\n  options: Array<Option<T>>;\n}> {\n  render(): React.ReactNode {\n    const { onChange, options, value } = this.props;\n    return (\n      <select\n        className=\"field\"\n        value={value}\n        onChange={event => {\n          const newValue = (event.target.value as any) as T;\n          onChange(newValue);\n        }}\n      >\n        {options.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    );\n  }\n}\n\nfunction NumberInput(props: {\n  value: number | null;\n  onChange: (newValue: number | null) => void;\n}) {\n  return (\n    <input\n      className=\"field\"\n      type=\"number\"\n      min=\"0\"\n      value={props.value === null ? \"\" : props.value}\n      onChange={e => {\n        if (!e.target.value) {\n          return props.onChange(null);\n        }\n\n        const value = Math.max(0, parseInt(e.target.value, 10));\n        props.onChange(value);\n      }}\n    />\n  );\n}\n\nconst SECOND_OPTION: Option<TimeUnit> = { value: \"second\", label: \"second\" };\nconst MINUTE_OPTION: Option<TimeUnit> = { value: \"minute\", label: \"minute\" };\nconst HOUR_OPTION: Option<TimeUnit> = { value: \"hour\", label: \"hour\" };\nconst DAY_OPTION: Option<TimeUnit> = { value: \"day\", label: \"day\" };\nconst WEEK_OPTION: Option<TimeUnit> = { value: \"week\", label: \"week\" };\nconst MONTH_OPTION: Option<TimeUnit> = { value: \"month\", label: \"month\" };\nconst YEAR_OPTION: Option<TimeUnit> = { value: \"year\", label: \"year\" };\n\nconst TASK_DURATION_UNIT_OPTIONS = [\n  MINUTE_OPTION,\n  HOUR_OPTION,\n  DAY_OPTION,\n  WEEK_OPTION,\n  MONTH_OPTION\n];\n\nconst TIME_SPENT_UNIT_OPTIONS = [\n  MINUTE_OPTION,\n  HOUR_OPTION,\n  DAY_OPTION,\n  WEEK_OPTION,\n  MONTH_OPTION,\n  YEAR_OPTION\n];\n\nconst TIME_SHAVED_UNIT_OPTIONS = [\n  SECOND_OPTION,\n  MINUTE_OPTION,\n  HOUR_OPTION,\n  DAY_OPTION,\n  WEEK_OPTION,\n  MONTH_OPTION\n];\n\nconst TASK_LIFETIME_UNIT_OPTIONS = [\n  DAY_OPTION,\n  WEEK_OPTION,\n  MONTH_OPTION,\n  YEAR_OPTION\n];\n\nconst TASK_FREQUENCY_UNIT_OPTIONS: Array<{\n  value: FrequencyUnit;\n  label: string;\n}> = [\n  { value: \"daily\", label: \"a day\" },\n  { value: \"weekly\", label: \"a week\" },\n  { value: \"monthly\", label: \"a month\" },\n  { value: \"yearly\", label: \"a year\" }\n];\n\nfunction useUnitValueState<U, V>(defaultValue: V, defaultUnit: U) {\n  const [value, setValue] = React.useState<V | null>(defaultValue);\n  const [unit, setUnit] = React.useState<U>(defaultUnit);\n\n  return {\n    value: {\n      current: value,\n      set: setValue\n    },\n    unit: {\n      current: unit,\n      set: setUnit\n    }\n  };\n}\n\nfunction isFilled(unitValueState: { value: { current: any } }) {\n  return unitValueState.value.current !== null;\n}\n\nfunction toUnitValue<U, V>(unitValueState: {\n  value: {\n    current: V | null;\n  };\n  unit: {\n    current: U;\n  };\n}): UnitValue<U, V> {\n  if (unitValueState.value.current === null) {\n    throw new Error(\"Cannot work with null values\");\n  }\n  return {\n    value: unitValueState.value.current,\n    unit: unitValueState.unit.current\n  };\n}\n\nfunction pluralizeOptions<T>(\n  options: Array<Option<T>>,\n  n: number | null\n): Array<Option<T>> {\n  if (n === null) {\n    return options;\n  }\n\n  return options.map(o => ({ ...o, label: plur(o.label, n) }));\n}\n\nconst Line: React.FC = props => {\n  return (\n    <span className=\"line\">\n      {props.children}\n      <br />\n    </span>\n  );\n};\n\nconst App: React.FC = () => {\n  const taskDuration = useUnitValueState(3, \"minute\" as TimeUnit);\n  const timeSpent = useUnitValueState(1, \"hour\" as TimeUnit);\n  const timeShaved = useUnitValueState(2, \"minute\" as TimeUnit);\n  const taskFrequency = useUnitValueState(10, \"daily\" as FrequencyUnit);\n  const taskLifetime = useUnitValueState(1, \"month\" as TimeUnit);\n\n  const canComputeResult = [\n    taskDuration,\n    timeShaved,\n    timeShaved,\n    taskLifetime,\n    taskFrequency\n  ].every(isFilled);\n\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <h1>I have a recurring task…</h1>\n        <div>\n          <Line>\n            {\"… that takes \"}\n            <NumberInput\n              value={taskDuration.value.current}\n              onChange={taskDuration.value.set}\n            />\n            <Select\n              value={taskDuration.unit.current}\n              onChange={taskDuration.unit.set}\n              options={pluralizeOptions(\n                TASK_DURATION_UNIT_OPTIONS,\n                taskDuration.value.current\n              )}\n            />\n            {\",\"}\n          </Line>\n          <Line>\n            {\"that I have to do \"}\n            <NumberInput\n              value={taskFrequency.value.current}\n              onChange={taskFrequency.value.set}\n            />\n            <b>\n              {` ${plur(\n                \"time\",\n                taskFrequency.value.current === null\n                  ? undefined\n                  : taskFrequency.value.current\n              )} `}\n            </b>\n            <Select\n              value={taskFrequency.unit.current}\n              onChange={taskFrequency.unit.set}\n              options={TASK_FREQUENCY_UNIT_OPTIONS}\n            />\n          </Line>\n          <Line>\n            <b>{\" for \"}</b>\n            <NumberInput\n              value={taskLifetime.value.current}\n              onChange={taskLifetime.value.set}\n            />\n            <Select\n              value={taskLifetime.unit.current}\n              onChange={taskLifetime.unit.set}\n              options={pluralizeOptions(\n                TASK_LIFETIME_UNIT_OPTIONS,\n                taskLifetime.value.current\n              )}\n            />\n            {\".\"}\n          </Line>\n\n          {\"If I spent \"}\n          <NumberInput\n            value={timeSpent.value.current}\n            onChange={timeSpent.value.set}\n          />\n          <Select\n            value={timeSpent.unit.current}\n            onChange={timeSpent.unit.set}\n            options={pluralizeOptions(\n              TIME_SPENT_UNIT_OPTIONS,\n              timeSpent.value.current\n            )}\n          />\n          <br />\n          {\" I could shorten that task by \"}\n          <NumberInput\n            value={timeShaved.value.current}\n            onChange={timeShaved.value.set}\n          />\n          <Select\n            value={timeShaved.unit.current}\n            onChange={timeShaved.unit.set}\n            options={pluralizeOptions(\n              TIME_SHAVED_UNIT_OPTIONS,\n              timeShaved.value.current\n            )}\n          />\n          {\".\"}\n        </div>\n\n        {/* TODO; Add advanced panel to define number of worked hours in a day and worked days in a week ? */}\n\n        {canComputeResult && (\n          <Result\n            taskDuration={normalizeDuration(toUnitValue(taskDuration))}\n            timeSpent={normalizeDuration(toUnitValue(timeSpent))}\n            timeShaved={normalizeDuration(toUnitValue(timeShaved))}\n            taskFrequency={normalizeFrequency(toUnitValue(taskFrequency))}\n            taskLifetime={normalizeDuration(toUnitValue(taskLifetime))}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst Result: React.FC<{\n  taskDuration: number;\n  timeSpent: number;\n  timeShaved: number;\n  taskFrequency: number;\n  taskLifetime: number;\n}> = ({ taskDuration, timeShaved, timeSpent, taskFrequency, taskLifetime }) => {\n  const {\n    worthIt,\n    timeSaved,\n    initialTaskTime,\n    optimizedTaskTime,\n    efficiencyFactor\n  } = isItWorthIt(\n    taskDuration,\n    taskFrequency,\n    taskLifetime,\n    timeShaved,\n    timeSpent\n  );\n\n  return (\n    <>\n      <h1>Would it be worth the time ?</h1>\n      <div className=\"answer\">{worthIt ? \"YES!\" : \"No...\"}</div>\n      <div className=\"stats\">\n        <div>Time spent: {formatDuration(timeSpent)}</div>\n        <div>Time saved: {formatDuration(timeSaved)}</div>\n        <div>\n          Efficiency factor:{\" \"}\n          {efficiencyFactor === Infinity ? \"∞\" : efficiencyFactor.toFixed(0)}%\n        </div>\n\n        <div>Total time of the task: {formatDuration(initialTaskTime)}</div>\n        <div>\n          Total time of the task, after optimization:{\" \"}\n          {formatDuration(optimizedTaskTime)}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}